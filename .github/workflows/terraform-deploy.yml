name: Terraform Infrastructure Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_db_master_password: ${{ secrets.DB_MASTER_PASSWORD }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform/environments

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Determine Environment
      id: environment
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "env_name=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        else
          echo "env_name=dev" >> $GITHUB_OUTPUT
        fi

    - name: Terraform Init
      run: |
        cd ${{ steps.environment.outputs.env_name }}
        terraform init

    - name: Terraform Format
      run: |
        cd ${{ steps.environment.outputs.env_name }}
        terraform fmt -check

    - name: Terraform Validate
      run: |
        cd ${{ steps.environment.outputs.env_name }}
        terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: |
        cd ${{ steps.environment.outputs.env_name }}
        terraform plan -no-color
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style ðŸ–Œ\`${{ steps.fmt.outcome }}\`
          #### Terraform Validation ðŸ¤–\`${{ steps.validate.outcome }}\`
          #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      run: |
        cd ${{ steps.environment.outputs.env_name }}
        terraform apply -auto-approve